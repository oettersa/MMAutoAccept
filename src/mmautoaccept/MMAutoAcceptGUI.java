/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mmautoaccept;
import com.melloware.jintellitype.HotkeyListener;
import com.melloware.jintellitype.JIntellitype;
import java.awt.*;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.*;
import javax.swing.*;

/**
 *
 * @author Simon Oetter
 */
public class MMAutoAcceptGUI extends javax.swing.JFrame implements HotkeyListener  {
    
    private final String VERSION = "1.2";

    private boolean check = true;
    private int flag = 0;
    private boolean sounds = true;
    private int xMouse;
    private int yMouse;
    private int width = (int)Toolkit.getDefaultToolkit().getScreenSize().getWidth();
    private int height = (int)Toolkit.getDefaultToolkit().getScreenSize().getHeight();
    

    /**
     * Creates new form MMAutoAcceptGUI
     */
    public MMAutoAcceptGUI() throws IOException {
        //first check to see if an instance of this application is already
        //running, use the name of the window title of this JFrame for checking
        if (JIntellitype.checkInstanceAlreadyRunning("JIntellitype Test Application")) {
         System.exit(1);
        }

        //next check to make sure JIntellitype DLL can be found and we are on
        //a Windows operating System
        if (!JIntellitype.isJIntellitypeSupported()) {
         System.exit(1);
        }
        
        initComponents();
        globalHotkey();
        //sets title and version info
        lb_info.setText("Match Making Auto Accepter v" + VERSION);
        
        //sets resolution text label
        lb_res.setText("Res: " + width + "x" + height);
        
        //checks to see if default process is running
        processCheck("csgo.exe");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        helpFrame = new javax.swing.JFrame();
        lb_help_exit = new javax.swing.JLabel();
        lb_help_title = new javax.swing.JLabel();
        lb_help_step1 = new javax.swing.JLabel();
        lb_help_step2 = new javax.swing.JLabel();
        lb_help_step3 = new javax.swing.JLabel();
        lb_help_step4 = new javax.swing.JLabel();
        lb_help_step4b = new javax.swing.JLabel();
        lb_help_move = new javax.swing.JLabel();
        lb_border = new javax.swing.JLabel();
        lb_select = new javax.swing.JLabel();
        combo_select = new javax.swing.JComboBox();
        bt_start = new javax.swing.JButton();
        bt_stop = new javax.swing.JButton();
        bt_exit = new javax.swing.JButton();
        bt_help = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        check_onTop = new javax.swing.JCheckBox();
        check_sounds = new javax.swing.JCheckBox();
        lb_status = new javax.swing.JLabel();
        lb_minimize = new javax.swing.JLabel();
        lb_close = new javax.swing.JLabel();
        lb_moveBar = new javax.swing.JLabel();
        lb_info = new javax.swing.JLabel();
        lb_author = new javax.swing.JLabel();
        lb_logo = new javax.swing.JLabel();
        lb_res = new javax.swing.JLabel();
        lb_bg = new javax.swing.JLabel();

        helpFrame.setAlwaysOnTop(true);
        helpFrame.setMinimumSize(new java.awt.Dimension(500, 150));
        helpFrame.setUndecorated(true);
        helpFrame.setResizable(false);
        helpFrame.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lb_help_exit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lb_help_exit.setText(" X ");
        lb_help_exit.setToolTipText("");
        lb_help_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lb_help_exitMouseClicked(evt);
            }
        });
        helpFrame.getContentPane().add(lb_help_exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(475, 11, -1, -1));

        lb_help_title.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lb_help_title.setText("Instructions");
        helpFrame.getContentPane().add(lb_help_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        lb_help_step1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lb_help_step1.setText("1. Select your game.");
        lb_help_step1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        helpFrame.getContentPane().add(lb_help_step1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 45, 481, -1));

        lb_help_step2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lb_help_step2.setText("2. Press Start to begin or ALT+F1. (You must be in game for it to work!)");
        helpFrame.getContentPane().add(lb_help_step2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 65, -1, -1));

        lb_help_step3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lb_help_step3.setText("3. To stop, press the Stop button or ALT+F2");
        helpFrame.getContentPane().add(lb_help_step3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 85, -1, -1));

        lb_help_step4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lb_help_step4.setText("4. Note: You will not be able to start the program without the game running.");
        helpFrame.getContentPane().add(lb_help_step4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 105, -1, -1));
        lb_help_step4.getAccessibleContext().setAccessibleName("4. <strong>Note: You will not be able to start the program without the game running.</strong>");

        lb_help_step4b.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lb_help_step4b.setText("(Reselect a game if you launch the game after running this program)");
        helpFrame.getContentPane().add(lb_help_step4b, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 125, -1, -1));

        lb_help_move.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lb_help_moveMousePressed(evt);
            }
        });
        lb_help_move.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                lb_help_moveMouseDragged(evt);
            }
        });
        helpFrame.getContentPane().add(lb_help_move, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 150));

        lb_border.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        helpFrame.getContentPane().add(lb_border, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 150));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(204, 204, 204));
        setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        setName("CS:GO Dota 2 Auto Accept"); // NOI18N
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lb_select.setFont(lb_select.getFont().deriveFont(lb_select.getFont().getSize()+3f));
        lb_select.setForeground(new java.awt.Color(255, 255, 255));
        lb_select.setText("Select Game:");
        getContentPane().add(lb_select, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 44, 109, 27));

        combo_select.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CounterStrike:Global Offensive", "Dota 2" }));
        combo_select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_selectActionPerformed(evt);
            }
        });
        getContentPane().add(combo_select, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 75, -1, 30));

        bt_start.setBackground(new java.awt.Color(147, 147, 147));
        bt_start.setText("Start");
        bt_start.setOpaque(false);
        bt_start.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bt_startMouseEntered(evt);
            }
        });
        bt_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_startActionPerformed(evt);
            }
        });
        getContentPane().add(bt_start, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 75, 90, 30));

        bt_stop.setBackground(new java.awt.Color(147, 147, 147));
        bt_stop.setText("Stop");
        bt_stop.setOpaque(false);
        bt_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_stopActionPerformed(evt);
            }
        });
        getContentPane().add(bt_stop, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 110, 90, 30));

        bt_exit.setBackground(new java.awt.Color(121, 121, 121));
        bt_exit.setText("Exit");
        bt_exit.setOpaque(false);
        bt_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_exitActionPerformed(evt);
            }
        });
        getContentPane().add(bt_exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 200, 90, 30));

        bt_help.setBackground(new java.awt.Color(140, 140, 140));
        bt_help.setText("Help");
        bt_help.setOpaque(false);
        bt_help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_helpActionPerformed(evt);
            }
        });
        getContentPane().add(bt_help, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 145, 90, 30));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(243, 57, 30, 168));

        check_onTop.setBackground(new java.awt.Color(126, 126, 126));
        check_onTop.setForeground(new java.awt.Color(255, 255, 255));
        check_onTop.setSelected(true);
        check_onTop.setText("Always On Top");
        check_onTop.setOpaque(false);
        check_onTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_onTopActionPerformed(evt);
            }
        });
        getContentPane().add(check_onTop, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, -1, -1));

        check_sounds.setBackground(new java.awt.Color(119, 119, 119));
        check_sounds.setForeground(new java.awt.Color(255, 255, 255));
        check_sounds.setSelected(true);
        check_sounds.setText("Play Sounds");
        check_sounds.setOpaque(false);
        check_sounds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_soundsActionPerformed(evt);
            }
        });
        getContentPane().add(check_sounds, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 205, -1, -1));

        lb_status.setBackground(new java.awt.Color(204, 204, 204));
        lb_status.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lb_status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_status.setText("<html><font color='red'>OFF</font></html>");
        getContentPane().add(lb_status, new org.netbeans.lib.awtextra.AbsoluteConstraints(284, 50, 86, -1));

        lb_minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmautoaccept/min_default.png"))); // NOI18N
        lb_minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lb_minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lb_minimizeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lb_minimizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lb_minimizeMouseExited(evt);
            }
        });
        getContentPane().add(lb_minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 5, 20, 20));

        lb_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmautoaccept/close_default.png"))); // NOI18N
        lb_close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lb_closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lb_closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lb_closeMouseExited(evt);
            }
        });
        getContentPane().add(lb_close, new org.netbeans.lib.awtextra.AbsoluteConstraints(375, 5, 20, 20));

        lb_moveBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lb_moveBarMousePressed(evt);
            }
        });
        lb_moveBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                lb_moveBarMouseDragged(evt);
            }
        });
        getContentPane().add(lb_moveBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 30));

        lb_info.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lb_info.setForeground(new java.awt.Color(255, 255, 255));
        lb_info.setText("Match Making Auto Accepter v1.X");
        getContentPane().add(lb_info, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 240, 30));

        lb_author.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lb_author.setForeground(new java.awt.Color(204, 204, 204));
        lb_author.setText("Simon Oetter");
        getContentPane().add(lb_author, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 233, -1, -1));

        lb_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmautoaccept/icon.png"))); // NOI18N
        getContentPane().add(lb_logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, 60));

        lb_res.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lb_res.setForeground(new java.awt.Color(204, 204, 204));
        lb_res.setText("Res: WxH");
        getContentPane().add(lb_res, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, -1));

        lb_bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmautoaccept/bg.png"))); // NOI18N
        getContentPane().add(lb_bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //initializes JIntellitype for the use of global hotkeys
    public void globalHotkey(){
        //create JIntellitype instance
        JIntellitype.getInstance();

        //Assign global hotkeys to ALT+F1 and ALT+F2
        //The identifiers are named 0 and 1
        JIntellitype.getInstance().registerHotKey(0, JIntellitype.MOD_ALT, 112);
        JIntellitype.getInstance().registerHotKey(1, JIntellitype.MOD_ALT, 113);
        
        //add the listener to the MMAutoAcceptGUI
        JIntellitype.getInstance().addHotKeyListener(this);
    }
    
    @Override
    public void onHotKey(int aIdentifier) {
        //choose actions based on hotkey identifier
        //if the the game process is launched, then the buttons are enabled
        if (aIdentifier == 0) {
            try {
                if(processCheck(processGameID())) {
                    start();
                }
                       
            } catch (IOException ex) {
                Logger.getLogger(MMAutoAcceptGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        else if (aIdentifier == 1)
            try {
                if(processCheck(processGameID())) {
                    stop();
                }
                       
            } catch (IOException ex) {
                Logger.getLogger(MMAutoAcceptGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
   }
    
    private void bt_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_startActionPerformed
	start();
    }//GEN-LAST:event_bt_startActionPerformed

    private void bt_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_exitActionPerformed
        //cleanup code for JIntellitype
        JIntellitype.getInstance().cleanUp();
        System.exit(0);
    }//GEN-LAST:event_bt_exitActionPerformed

    private void lb_minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_minimizeMouseClicked
        //minimize the JFrame
        this.setState(MMAutoAcceptGUI.ICONIFIED);
    }//GEN-LAST:event_lb_minimizeMouseClicked

    private void lb_closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_closeMouseClicked
        //cleanup code for JIntellitype
        JIntellitype.getInstance().cleanUp();
        System.exit(0);
    }//GEN-LAST:event_lb_closeMouseClicked

    private void bt_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_stopActionPerformed
        stop();
    }//GEN-LAST:event_bt_stopActionPerformed

    private void check_onTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_onTopActionPerformed
        if(check_onTop.isSelected()) {
            setAlwaysOnTop(true);
        }
        
        else if(!check_onTop.isSelected()) {
            setAlwaysOnTop(false);
        }
    }//GEN-LAST:event_check_onTopActionPerformed

    private void lb_moveBarMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_moveBarMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_lb_moveBarMouseDragged

    private void lb_moveBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_moveBarMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_lb_moveBarMousePressed

    private void check_soundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_soundsActionPerformed
        if(check_sounds.isSelected()) {
            sounds = true;
        }
        
        else if(!check_sounds.isSelected()) {
            sounds = false;
        }
    }//GEN-LAST:event_check_soundsActionPerformed

    private void bt_helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_helpActionPerformed
        //spawns help window (unhides it)
        helpFrame.setLocation(width/2-250, height/2-75);
        helpFrame.setVisible(true);
    }//GEN-LAST:event_bt_helpActionPerformed

    private void lb_help_exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_help_exitMouseClicked
        //hides help window
        helpFrame.setVisible(false);
    }//GEN-LAST:event_lb_help_exitMouseClicked

    private void lb_help_moveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_help_moveMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_lb_help_moveMousePressed

    private void lb_help_moveMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_help_moveMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        helpFrame.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_lb_help_moveMouseDragged

    private void lb_minimizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_minimizeMouseEntered
        lb_minimize.setIcon(new ImageIcon(getClass().getResource("min_hover.png")));
    }//GEN-LAST:event_lb_minimizeMouseEntered

    private void lb_minimizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_minimizeMouseExited
        lb_minimize.setIcon(new ImageIcon(getClass().getResource("min_default.png")));
    }//GEN-LAST:event_lb_minimizeMouseExited

    private void lb_closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_closeMouseEntered
        lb_close.setIcon(new ImageIcon(getClass().getResource("close_hover.png")));
    }//GEN-LAST:event_lb_closeMouseEntered

    private void lb_closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_closeMouseExited
        lb_close.setIcon(new ImageIcon(getClass().getResource("close_default.png")));
    }//GEN-LAST:event_lb_closeMouseExited

    private void combo_selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_selectActionPerformed
        try {
            processCheck(processGameID());
        
        } catch (IOException ex) {
                Logger.getLogger(MMAutoAcceptGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_combo_selectActionPerformed

    private void bt_startMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_startMouseEntered
        try {
            processCheck(processGameID());
        
        } catch (IOException ex) {
                Logger.getLogger(MMAutoAcceptGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_bt_startMouseEntered

    public void start() {
        //check which is selected in the combo box
        if(combo_select.getSelectedItem().equals("CounterStrike:Global Offensive")) {
            flag = 0;
        }
        
        else if(combo_select.getSelectedItem().equals("Dota 2")) {
            flag = 1;
        }
        
        //check is the interrupt flag for the autoclick thread
        //flag is selects which game to run the autoclick for
        check = true; 
        lb_status.setText("<html><font color='green'>ON</font></html>");
        startSound();
        
        //calls the main algorithm
        WorkerThread wt = new WorkerThread();
        wt.execute();
    }
    
    //stops the keypresses
    public void stop() {
        check = false;
        lb_status.setText("<html><font color='red'>OFF</font></html>");
        stopSound();
    }
    
    public void startSound()
    {
       //plays the start sound
        if(sounds)
        {
            try
            {
                Clip clip;
                AudioInputStream sound = AudioSystem.getAudioInputStream(getClass().getResource("/mmautoaccept/on.wav"));
                clip = AudioSystem.getClip();
                clip.open(sound);
                clip.start(); 
            }   catch (Exception ex) {
                System.err.println(ex.getMessage());
            }
        } 
    }
    
    public void stopSound()
    {
        //plays the stop sound
        if(sounds)
        {
            try
            {
                Clip clip;
                AudioInputStream sound = AudioSystem.getAudioInputStream(getClass().getResource("/mmautoaccept/off.wav"));
                clip = AudioSystem.getClip();
                clip.open(sound);
                clip.start(); 
            }   catch (Exception ex) {
                System.err.println(ex.getMessage());
            }
        }
    }
    
    public boolean processCheck(String id) throws IOException
    {
        String line;
        String pidInfo = "";

        Process p = Runtime.getRuntime().exec(System.getenv("windir") +"\\system32\\"+"tasklist.exe");
        BufferedReader br =  new BufferedReader(new InputStreamReader(p.getInputStream()));

        while((line = br.readLine()) != null) {
           pidInfo += line; 
        }

        br.close();

        if(pidInfo.contains(id)) {
            bt_start.setEnabled(true);
            return true;
        }
            
        else {
            bt_start.setEnabled(false);
            return false;
        }    
    }
    
    public String processGameID()
    {
        String process = combo_select.getSelectedItem().toString();
        
        if(process.equals("CounterStrike:Global Offensive"))
            return "csgo.exe";

        else
            return "dota2.exe";
    }
    
    //stringworker class so that the loop doesn't run in the EDT
    class WorkerThread extends SwingWorker<Void ,Void>
    {
        //delay between mouse clicks (currently set to 1 sec)
        final int DELAY = 1000;
        int mousePrevX = MouseInfo.getPointerInfo().getLocation().x;
        int mousePrevY = MouseInfo.getPointerInfo().getLocation().y;
        double ratio_x;
        double ratio_y;

        //dota 2 community tab and accept box coordinates for 16:9 (default)
        int dota2_comm_x = 1400;
        int dota2_comm_y = 25;  
        int dota2_acc_x = 777;
        int dota2_acc_y = 520;
        //dota 2 community tab and accept box coordinates for 16:10
        int dota2_comm_x_1610 = 1460;
        int dota2_comm_y_1610 = 25;  
        int dota2_acc_x_1610 = 760;
        int dota2_acc_y_1610 = 570;

        //cs:go accept box coordinates for 16:9 (default)
        int csgo_acc_x = 485;
        int csgo_acc_y = 255;
        //cs:go accept box coordinates for 16:10
        int csgo_acc_x_1610 = 425;
        int csgo_acc_y_1610 = 285;

        //resolution handling
        public void resolution()
        {
            //gets the dimensions of the current resolution
            int width = (int)Toolkit.getDefaultToolkit().getScreenSize().getWidth();
            int height = (int)Toolkit.getDefaultToolkit().getScreenSize().getHeight();
            double aspect = width/height;

            //scales coordinates for 16:9 resolutions
            if(aspect == 16/9 && width < 1920)
            {
                ratio_x = 1920.0/width;
                ratio_y = 1080.0/height;

                dota2_comm_x /= ratio_x;
                dota2_comm_y /= ratio_y;  
                dota2_acc_x /= ratio_x;
                dota2_acc_y /= ratio_y;

                csgo_acc_x /= ratio_x;
                csgo_acc_y /= ratio_y;
            }

            //checks for 16:10 ratio
            if(aspect == 16/10)
            {
                //sets default coordinates to coordinates for 16:10 resolutions
                dota2_comm_x = dota2_comm_x_1610;
                dota2_comm_y = dota2_comm_y_1610;  
                dota2_acc_x = dota2_acc_x_1610;
                dota2_acc_y = dota2_acc_y_1610;

                csgo_acc_x = csgo_acc_x_1610;
                csgo_acc_y = csgo_acc_y_1610;

                //scales coordinates for 16:10 resolutions
                if(aspect == 16/10 && width < 1920)
                {
                    ratio_x = 1920.0/width;
                    ratio_y = 1080.0/height;

                    dota2_comm_x /= ratio_x;
                    dota2_comm_y /= ratio_y;  
                    dota2_acc_x /= ratio_x;
                    dota2_acc_y /= ratio_y;

                    csgo_acc_x /= ratio_x;
                    csgo_acc_y /= ratio_y;
                }
            }   
        }

        protected Void doInBackground() throws Exception 
        {
            resolution();

            try 
            {
                Robot robot = new Robot();

                //gives a 3 second delay before program starts (for alt-tabbing in and such)
                //robot.delay(3000);

                while(check)
                {
                    //allows moving mouse to the corner for stopping the program (temp disabled)
                    /*
                    if(MouseInfo.getPointerInfo().getLocation().x >= Toolkit.getDefaultToolkit().getScreenSize().getWidth()-1 && MouseInfo.getPointerInfo().getLocation().y == 0)
                    {
                        stop();
                    } 
                    */

                    //counterstrike
                    if(flag == 0)
                    {
                        //get previous mouse coordinates
                        mousePrevX = MouseInfo.getPointerInfo().getLocation().x;
                        mousePrevY = MouseInfo.getPointerInfo().getLocation().y;

                        //move to accept box
                        robot.mouseMove(csgo_acc_x, csgo_acc_y);
                        robot.mousePress(InputEvent.BUTTON1_MASK);
                        robot.mouseRelease(InputEvent.BUTTON1_MASK);

                        //move back to previous location
                        robot.mouseMove(mousePrevX, mousePrevY);

                        //set delay between clicks
                        robot.delay(DELAY); 
                    }

                    //dota 2
                    else if(flag == 1)
                    {
                        //get previous mouse coordinates
                        mousePrevX = MouseInfo.getPointerInfo().getLocation().x;
                        mousePrevY = MouseInfo.getPointerInfo().getLocation().y;

                        //move to community tab
                        robot.mouseMove(dota2_comm_x, dota2_comm_y);
                        robot.mousePress(InputEvent.BUTTON1_MASK);
                        robot.mouseRelease(InputEvent.BUTTON1_MASK);

                        //move to accept box
                        robot.mouseMove(dota2_acc_x, dota2_acc_y);
                        robot.mousePress(InputEvent.BUTTON1_MASK);
                        robot.mouseRelease(InputEvent.BUTTON1_MASK);

                        //move back to previous location
                        robot.mouseMove(mousePrevX, mousePrevY);

                        //set delay between clicks
                        robot.delay(DELAY); 
                    }   
                } //end while

            } //end try   

            catch (AWTException e) 
            {
                e.printStackTrace();
            }   

           return null;

        } //end doInBackground()

     } //end worker class
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MMAutoAcceptGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MMAutoAcceptGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MMAutoAcceptGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MMAutoAcceptGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MMAutoAcceptGUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MMAutoAcceptGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_exit;
    private javax.swing.JButton bt_help;
    private javax.swing.JButton bt_start;
    private javax.swing.JButton bt_stop;
    private javax.swing.JCheckBox check_onTop;
    private javax.swing.JCheckBox check_sounds;
    private javax.swing.JComboBox combo_select;
    private javax.swing.JFrame helpFrame;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lb_author;
    private javax.swing.JLabel lb_bg;
    private javax.swing.JLabel lb_border;
    private javax.swing.JLabel lb_close;
    private javax.swing.JLabel lb_help_exit;
    private javax.swing.JLabel lb_help_move;
    private javax.swing.JLabel lb_help_step1;
    private javax.swing.JLabel lb_help_step2;
    private javax.swing.JLabel lb_help_step3;
    private javax.swing.JLabel lb_help_step4;
    private javax.swing.JLabel lb_help_step4b;
    private javax.swing.JLabel lb_help_title;
    private javax.swing.JLabel lb_info;
    private javax.swing.JLabel lb_logo;
    private javax.swing.JLabel lb_minimize;
    private javax.swing.JLabel lb_moveBar;
    private javax.swing.JLabel lb_res;
    private javax.swing.JLabel lb_select;
    private javax.swing.JLabel lb_status;
    // End of variables declaration//GEN-END:variables
 
}
